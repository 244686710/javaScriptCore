1. 跨文档信息传递
2. 拖放API
3. 音频与视频

1. 跨文档信息传递 简称XDM
核心： postMessage()
参数： data： 作为 postMessage() 第一个参数传入的字符串数据。 origin： 发送消息的文档所在的域， 例如 "http://www.wrox.com"
source： 发送消息的文档的 window 对象的代理。 这个代理对象主要用于在发送上一条消息的
窗口中调用 postMessage() 方法。 如果发送消息的窗口来自同一个域， 那这个对象就是
window
EventUtil.addHandler(window, "message", function (event) {
    //确保发送消息的域是已知的域
    if (event.origin == "http://www.wrox.com") {
        //处理接收到的数据
        processMessage(event.data);
        //可选：向来源窗口发送回执
        event.source.postMessage("Received!", "http://p2p.wrox.com");
    }
});

16.2 原生拖放
拖动某元素时， 将依次触发下列事件：
    (1) dragstart(2) drag(3) dragend
当某个元素被拖动到一个有效的放置目标上时， 下列事件会依次发生：
    (1) dragenter(2) dragover(3) dragleave 或 drop

var droptarget = document.getElementById("droptarget");
EventUtil.addHandler(droptarget, "dragover", function (event) {
    EventUtil.preventDefault(event);
});
EventUtil.addHandler(droptarget, "dragenter", function (event) {
    EventUtil.preventDefault(event);
});

拖放时数据
dataTransfer 对象取得数据，最好在取得 URL 数据时检测两个值，而在取得文本数据时使用
"Text"。
var dataTransfer = event.dataTransfer; 
//读取 URL 
var url = dataTransfer.getData("url") ||dataTransfer.getData("text/uri-list"); 
//读取文本
var text = dataTransfer.getData("Text");

dropEffect与effectAllowed

利用 dataTransfer 对象，可不光是能够传输数据，还能通过它来确定被拖动的元素以及作为放
置目标的元素能够接收什么操作。为此，需要访问 dataTransfer 对象的两个属性：dropEffect 和
effectAllowed。
其中，通过 dropEffect 属性可以知道被拖动的元素能够执行哪种放置行为。这个属性有下列 4
个可能的值。
 "none"：不能把拖动的元素放在这里。这是除文本框之外所有元素的默认值。
 "move"：应该把拖动的元素移动到放置目标。
 "copy"：应该把拖动的元素复制到放置目标。
 "link"：表示放置目标会打开拖动的元素（但拖动的元素必须是一个链接，有 URL）

dropEffect 属性只有搭配 effectAllowed 属性才有用。effectAllowed 属性表示允许拖动元
素的哪种 dropEffect，effectAllowed 属性可能的值如下。
 "uninitialized"：没有给被拖动的元素设置任何放置行为。
 "none"：被拖动的元素不能有任何行为。
 "copy"：只允许值为"copy"的 dropEffect。
 "link"：只允许值为"link"的 dropEffect。
 "move"：只允许值为"move"的 dropEffect。
 "copyLink"：允许值为"copy"和"link"的 dropEffect。
 "copyMove"：允许值为"copy"和"move"的 dropEffect。
 "linkMove"：允许值为"link"和"move"的 dropEffect。
 "all"：允许任意 dropEffect。
必须在 ondragstart 事件处理程序中设置 effectAllowed 属性。

媒体元素：
<audio>和<video>
<!-- 嵌入视频 --> 
<video src="conference.mpg" id="myVideo">Video player not available.</video> 
<!-- 嵌入音频 --> 
<audio src="song.mp3" id="myAudio">Audio player not available.</audio> 

因为并非所有浏览器都支持所有媒体格式，所以可以指定多个不同的媒体来源。为此，不用在标签
中指定 src 属性，而是要像下面这样使用一或多个<source>元素。
<!-- 嵌入视频 --> 
<video id="myVideo"> 
 <source src="conference.webm" type="video/webm; codecs='vp8, vorbis'"> 
 <source src="conference.ogv" type="video/ogg; codecs='theora, vorbis'"> 
 <source src="conference.mpg"> 
 Video player not available. 
</video> 
<!-- 嵌入音频 --> 
<audio id="myAudio"> 
 <source src="song.ogg" type="audio/ogg"> 
 <source src="song.mp3" type="audio/mpeg"> 
 Audio player not available. 
</audio>


属 性 数据类型 说 明
autoplay 布尔值 取得或设置autoplay标志
buffered 时间范围 表示已下载的缓冲的时间范围的对象
bufferedBytes 字节范围 表示已下载的缓冲的字节范围的对象
bufferingRate 整数 下载过程中每秒钟平均接收到的位数
bufferingThrottled 布尔值 表示浏览器是否对缓冲进行了节流
controls 布尔值 取得或设置controls属性，用于显示或隐藏浏览器内置的控件
currentLoop 整数 媒体文件已经循环的次数
currentSrc 字符串 当前播放的媒体文件的URL 
currentTime 浮点数 已经播放的秒数
defaultPlaybackRate 浮点数 取得或设置默认的播放速度。默认值为1.0秒
duration 浮点数 媒体的总播放时间（秒数）
ended 布尔值 表示媒体文件是否播放完成
loop 布尔值 取得或设置媒体文件在播放完成后是否再从头开始播放
muted 布尔值 取得或设置媒体文件是否静音
networkState 整数 表示当前媒体的网络连接状态：0表示空，1表示正在加载，2表示
正在加载元数据，3表示已经加载了第一帧，4表示加载完成
paused 布尔值 表示播放器是否暂停
playbackRate 浮点数 取得或设置当前的播放速度。用户可以改变这个值，让媒体播放速
度变快或变慢，这与defaultPlaybackRate只能由开发人员修改
的defaultPlaybackRate不同
played 时间范围 到目前为止已经播放的时间范围
readyState 整数 表示媒体是否已经就绪（可以播放了）。0表示数据不可用，1表示
可以显示当前帧，2表示可以开始播放，3表示媒体可以从头到尾播放
seekable 时间范围 可以搜索的时间范围
seeking 布尔值 表示播放器是否正移动到媒体文件中的新位置
src 字符串 媒体文件的来源。任何时候都可以重写这个属性
start 浮点数 取得或设置媒体文件中开始播放的位置，以秒表示
totalBytes 整数 当前资源所需的总字节数
videoHeight 整数 返回视频（不一定是元素）的高度。只适用于<video> 
videoWidth 整数 返回视频（不一定是元素）的宽度。只适用于<video> 
volume 浮点数 取得或设置当前音量值为0.0到1.0 

事 件 触发时机
abort 下载中断
canplay 可以播放时；readyState值为2 
canplaythrough 播放可继续，而且应该不会中断；readyState值为3 
canshowcurrentframe 当前帧已经下载完成；readyState值为1 
dataunavailable 因为没有数据而不能播放；readyState值为0 
durationchange duration属性的值改变
emptied 网络连接关闭
empty 发生错误阻止了媒体下载
ended 媒体已播放到末尾，播放停止
error 下载期间发生网络错误
load 所有媒体已加载完成。这个事件可能会被废弃，建议使用canplaythrloadeddata 媒体的第一帧已加载完成
loadedmetadata 媒体的元数据已加载完成
loadstart 下载已开始
pause 播放已暂停
play 媒体已接收到指令开始播放
playing 媒体已实际开始播放
progress 正在下载
ratechange 播放媒体的速度改变
seeked 搜索结束
seeking 正移动到新位置
stalled 浏览器尝试下载，但未接收到数据
timeupdate currentTime被以不合理或意外的方式更新
volumechange volume属性值或muted属性值已改变
waiting 播放暂停，等待下载更多数据


检测编解码器的支持情况：

自动播放
var audio = new Audio("sound.mp3"); 
EventUtil.addHandler(audio, "canplaythrough", function(event){ 
  audio.play(); 
}); 
创建新的 Audio 实例即可开始下载指定的文件。下载完成后，调用 play()就可在 iOS 中，调用 play()时会弹出一个对话框
，得到用户的许可后才能播放声音频播放后再播放另一段音频，必须在 onfinish 事件处理程序中调用 play()

历史状态管理器：