1. 表单序列化
    serialize();

小结：
 可以使用一些标准或非标准的方法选择文本框中的全部或部分文本。
 大多数浏览器都采用了 Firefox 操作选择文本的方式，但 IE 仍然坚持自己的实现。
 在文本框的内容变化时，可以通过侦听键盘事件以及检测插入的字符，来允许或禁止用户输入
某些字符。
除 Opera 之外的所有浏览器都支持剪贴板事件，包括 copy、cut 和 paste。其他浏览器在实现剪
贴板事件时也可以分为几种不同的情况。
 IE、Firefox、Chrome 和 Safari 允许通过 JavaScript 访问剪贴板中的数据，而 Opera 不允许这种访
问方式。
 即使是 IE、Chrome 和 Safari，它们各自的实现方式也不相同。
 Firefox、Safari 和 Chrome 只允许在 paste 事件发生时读取剪贴板数据，而 IE 没有这个限制。
 Firefox、Safari 和 Chrome 只允许在发生剪贴板事件时访问与剪贴板相关的信息，而 IE 允许在任
何时候访问相关信息

过滤输入
1. 屏蔽字符
有时候，我们需要用户输入的文本中包含或不包含某些字符。例如，电话号码中不能包含非数值字
符。如前所述，响应向文本框中插入字符操作的是 keypress 事件。因此，可以通过阻止这个事件的默
认行为来屏蔽此类字符。在极端的情况下，可以通过下列代码屏蔽所有按键操作。
EventUtil.addHandler(textbox, "keypress", function(event){ 
 event = EventUtil.getEvent(event); 
 EventUtil.preventDefault(event); 
}); 
运行以上代码后，由于所有按键操作都将被屏蔽，结果会导致文本框变成只读的。如果只想屏蔽特
定的字符，则需要检测 keypress 事件对应的字符编码，然后再决定如何响应。例如，下列代码只允许
用户输入数值。
EventUtil.addHandler(textbox, "keypress", function(event){ 
 event = EventUtil.getEvent(event); 
 var target = EventUtil.getTarget(event); 
 var charCode = EventUtil.getCharCode(event); 
 if (!/\d/.test(String.fromCharCode(charCode))){ 
     EventUtil.preventDefault(event); 
 } 
}); 

：复制、粘贴及其他操作还要用到 Ctrl 键。在除 IE 之外的所有
浏览器中，前面的代码也会屏蔽 Ctrl+C、Ctrl+V，以及其他使用 Ctrl 的组合键。因此，最后还要添加一
个检测条件，以确保用户没有按下 Ctrl 键，如下面的例子所示。
EventUtil.addHandler(textbox, "keypress", function(event){ 
 event = EventUtil.getEvent(event); 
 var target = EventUtil.getTarget(event); 
 var charCode = EventUtil.getCharCode(event); 
 if (!/\d/.test(String.fromCharCode(charCode)) && charCode > 9 && 
 !event.ctrlKey){ 
 EventUtil.preventDefault(event); 
 } 
}); 

3.操作剪切板
通过 JavaScript 访问剪贴板），HTML 5 后来也把剪贴板事件纳入了规范。下列就是 6 个剪贴板事件。
 beforecopy：在发生复制操作前触发。
 copy：在发生复制操作时触发。
 beforecut：在发生剪切操作前触发。
 cut：在发生剪切操作时触发。
 beforepaste：在发生粘贴操作前触发。
 paste：在发生粘贴操作时触发。
由于没有针对剪贴板操作的标准，这些事件及相关对象会因浏览器而异。在 Safari、Chrome 和 Firefox
中，beforecopy、beforecut 和 beforepaste 事件只会在显示针对文本框的上下文菜单（预期将发
生剪贴板事件）的情况下触发。但是，IE 则会在触发 copy、cut 和 paste 事件之前先行触发这些事件。
至于 copy、cut 和 paste 事件，只要是在上下文菜单中选择了相应选项，或者使用了相应的键盘组合
键，所有浏览器都会触发它们。
在实际的事件发生之前，通过 beforecopy、beforecut 和 beforepaste 事件可以在向剪贴板发
送数据，或者从剪贴板取得数据之前修改数据。不过，取消这些事件并不会取消对剪贴板的操作——只
有取消 copy、cut 和 paste 事件，才能阻止相应操作发生。
要访问剪贴板中的数据，可以使用 clipboardData 对象：在 IE 中，这个对象是 window 对象的
属性；而在 Firefox 4+、Safari 和 Chrome 中，这个对象是相应 event 对象的属性。但是，在 Firefox、
Safari 和 Chorme 中，只有在处理剪贴板事件期间 clipboardData 对象才有效，这是为了防止对剪贴板
的未授权访问；在 IE 中，则可以随时访问 clipboardData 对象。为了确保跨浏览器兼容性，最好只
在发生剪贴板事件期间使用这个对象。
这个 clipboardData 对象有三个方法：getData()、setData()和 clearData()。其中，getData()
用于从剪贴板中取得数据，它接受一个参数，即要取得的数据的格式。在 IE 中，有两种数据格式："text"
和"URL"。在 Firefox、Safari 和 Chrome 中，这个参数是一种 MIME 类型；不过，可以用"text"代表
"text/plain"。
类似地，setData()方法的第一个参数也是数据类型，第二个参数是要放在剪贴板中的文本。对于
第一个参数，IE 照样支持"text"和"URL"，而 Safari 和 Chrome 仍然只支持 MIME 类型。但是，与
getData()方法不同的是，Safari 和 Chrome 的 setData()方法不能识别"text"类型。这两个浏览器在
成功将文本放到剪贴板中后，都会返回 true；否则，返回 false。为了弥合这些差异，我们可以向
EventUtil 中再添加下列方法。
var EventUtil = {
    getClipboardText: function(event){ 
    var clipboardData = (event.clipboardData || window.clipboardData); 
    return clipboardData.getData("text"); 
    }, 
    //省略的代码
 
 setClipboardText: function(event, value){ 
 if (event.clipboardData){ 
 return event.clipboardData.setData("text/plain", value); 
 } else if (window.clipboardData){ 
 return window.clipboardData.setData("text", value); 
 } 
 }, 
 //省略的代码
};  