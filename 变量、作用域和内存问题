基本类型和引用类型的值
    5种基本数据类型：Undefined 、 Null 、 Boolean 、 Number 和 String 
        function setName(obj) {
            obj.name = "Nicholas";
            obj = new Object();
            obj.name = "Greg";
        }
        var person = new Object();
        setName(person);
        alert(person.name); //"Nicholas"
            这个例子与前一个例子的唯一区别，就是在 setName() 函数中添加了两行代码：一行代码为 obj
        重新定义了一个对象，另一行代码为该对象定义了一个带有不同值的 name 属性。在把 person 传递给
        setName() 后，其 name 属性被设置为 "Nicholas" 。然后，又将一个新对象赋给变量 obj ，同时将其 name
        属性设置为 "Greg" 。如果 person 是按引用传递的，那么 person 就会自动被修改为指向其 name 属性值
        为 "Greg" 的新对象。但是，当接下来再访问 person.name 时，显示的值仍然是 "Nicholas" 。这说明
        即使在函数内部修改了参数的值，但原始的引用仍然保持未变。实际上，当在函数内部重写 obj 时，这
        个变量引用的就是一个局部对象了。而这个局部对象会在函数执行完毕后立即被销毁

    检测类型
        typeof :基本类型
        instanceof : 引用类型检测

        eq: var obj = new Object();
            var result = obj instanceof Object; // true

JavaScript 变量可以用来保存两种类型的值：基本类型值和引用类型值。基本类型的值源自以下 
    5种基本数据类型： Undefined 、 Null 、 Boolean 、 Number 和 String 。
    基本类型值和引用类型值具有以下特点：
         基本类型值在内存中占据固定大小的空间，因此被保存在栈内存中；
         从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本；
         引用类型的值是对象，保存在堆内存中；
         包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针；
         从一个变量向另一个变量复制引用类型的值，复制的其实是指针，因此两个变量最终都指向同
        一个对象；
         确定一个值是哪种基本类型可以使用 typeof 操作符，而确定一个值是哪种引用类型可以使用
        instanceof 操作符。
        所有变量（包括基本类型和引用类型）都存在于一个执行环境（也称为作用域）当中，这个执
        行环境决定了变量的生命周期，以及哪一部分代码可以访问其中的变量。以下是关于执行环境的几
        点总结：
         执行环境有全局执行环境（也称为全局环境）和函数执行环境之分；
         每次进入一个新执行环境，都会创建一个用于搜索变量和函数的作用域链；
         函数的局部环境不仅有权访问函数作用域中的变量，而且有权访问其包含（父）环境，乃至全
        局环境；
         全局环境只能访问在全局环境中定义的变量和函数，而不能直接访问局部环境中的任何数据；
         变量的执行环境有助于确定应该何时释放内存。
        JavaScript 是一门具有自动垃圾收集机制的编程语言，开发人员不必关心内存分配和回收问题。可
        以对 JavaScript 的垃圾收集例程作如下总结。
         离开作用域的值将被自动标记为可以回收，因此将在垃圾收集期间被删除。
         “标记清除”是目前主流的垃圾收集算法，这种算法的思想是给当前不使用的值加上标记，然
        后再回收其内存。
         另一种垃圾收集算法是“引用计数”，这种算法的思想是跟踪记录所有值被引用的次数。JavaScript
        引擎目前都不再使用这种算法；但在 IE 中访问非原生 JavaScript 对象（如 DOM 元素）时，这种
        算法仍然可能会导致问题。
         当代码中存在循环引用现象时，“引用计数”算法就会导致问题。
         解除变量的引用不仅有助于消除循环引用现象，而且对垃圾收集也有好处。为了确保有效地回
        收内存，应该及时解除不再使用的全局对象、全局对象属性以及循环引用变量的引用。