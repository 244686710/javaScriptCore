本章内容
 使用高级函数
 防篡改对象
 Yieldin Ti 

1. 高级函数
    安全类型检测
2. 函数绑定bind()

3. 函数柯里化

高级定时器
    ***节流函数：
        函数节流背后的基本思想是指，某些代码不可以在没有间断的情况连续重复执行。第一次调用函数，
    创建一个定时器，在指定的时间间隔之后运行代码。当第二次调用该函数时，它会清除前一次的定时器
    并设置另一个。如果前一个定时器已经执行过了，这个操作就没有任何意义。然而，如果前一个定时器
    尚未执行，其实就是将其替换为一个新的定时器。目的是只有在执行函数的请求停止了一段时间之后才
    执行。

    var processor = { 
        timeoutId: null, 
        //实际进行处理的方法
        performProcessing: function(){ 
        //实际执行的代码
        }, 
        //初始处理调用的方法
        process: function(){ 
            clearTimeout(this.timeoutId); 
            var that = this; 
            this.timeoutId = setTimeout(function(){ 
                 that.performProcessing(); 
            }, 100); 
        } 
    }; 
    //尝试开始执行 
    processor.process(); 

    简写：
    function throttle(method, context) { 
    clearTimeout(method.tId); 
    method.tId= setTimeout(function(){ 
    method.call(context); 
    }, 100); 
    } 

    function resizeDiv(){ 
    var div = document.getElementById("myDiv"); 
    div.style.height = div.offsetWidth + "px"; 
    } 
    window.onresize = function(){ 
    throttle(resizeDiv); 
    }; 