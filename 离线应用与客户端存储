本章内容
 进行离线检测
 使用离线缓存
 在浏览器中保存数据

1.离线检测
navigator.onLine 属性之外，为了更好地确定网络是否可用，HTML5 还定义了两个事件：
online 和 offline。当网络从离线变为在线或者从在线变为离线时，分别触发这两个事件。这两个事
件在 window 对象上触发。
EventUtil.addHandler(window, "online", function(){ 
 alert("Online"); 
}); 
EventUtil.addHandler(window, "offline", function(){ 
 alert("Offline"); 
}); 

2.应用缓存
    一般来讲，这些事件会随着页面加载按上述顺序依次触发。不过，通过调用 update()方法也可以
    手工干预，让应用缓存为检查更新而触发上述事件。
    applicationCache.update(); 
    update()一经调用，应用缓存就会去检查描述文件是否更新（触发 checking 事件），然后就像页
    面刚刚加载一样，继续执行后续操作。如果触发了 cached 事件，就说明应用缓存已经准备就绪，不会
    再发生其他操作了。如果触发了 updateready 事件，则说明新版本的应用缓存已经可用，而此时你需
    要调用 swapCache()来启用新应用缓存。
    EventUtil.addHandler(applicationCache, "updateready", function(){ 
    applicationCache.swapCache(); 
    });     
3.数据存储
    1.HTTP Cookie，通常直接叫做 cookie
    1. 限制
    cookie 在性质上是绑定在特定的域名下的。当设定了一个 cookie 后，再给创建它的域名发送请求时，
    都会包含这个 cookie。这个限制确保了储存在 cookie 中的信息只能让批准的接受者访问，而无法被其他
    域访问。
    由于 cookie 是存在客户端计算机上的，还加入了一些限制确保 cookie 不会被恶意使用，同时不会占
    据太多磁盘空间。每个域的 cookie 总数是有限的，不过浏览器之间各有不同
     IE6 以及更低版本限制每个域名最多 20 个 cookie。
     IE7 和之后版本每个域名最多 50 个。IE7 最初是支持每个域名最大 20 个 cookie，之后被微软的
    一个补丁所更新。 
     Firefox 限制每个域最多 50 个 cookie。
     Opera 限制每个域最多 30 个 cookie。 
     Safari 和 Chrome 对于每个域的 cookie 数量限制没有硬性规定。
    当超过单个域名限制之后还要再设置 cookie，浏览器就会清除以前设置的 cookie。IE 和 Opera 会删
    除最近最少使用过的（LRU，Least Recently Used）cookie，腾出空间给新设置的 cookie。Firefox 看上去
    好像是随机决定要清除哪个 cookie，所以考虑 cookie 限制非常重要，以免出现不可预期的后果。
    浏览器中对于 cookie 的尺寸也有限制。大多数浏览器都有大约 4096B（加减 1）的长度限制。为了
    最佳的浏览器兼容性，最好将整个 cookie 长度限制在 4095B（含 4095）以内。尺寸限制影响到一个域
    下所有的 cookie，而并非每个 cookie 单独限制。

    JavaScript 中的 cookie 
    必须使用 decodeURIComponent()来解码
    document.cookie 并不会覆盖 cookie，除非设置的cookie 的名称已经存在

    设置 cookie 的格式如下，和 Set-Cookie 头中使用的格式一样。
        name=value; expires=expiration_time; path=domain_path; domain=domain_name; secure 
        这些参数中，只有 cookie 的名字和值是必需的。下面是一个简单的例子。
        document.cookie = "name=Nicholas"; 

    所以最好每次设置 cookie 时都像下面这个例子中一样使用 encodeURIComponent()。
    document.cookie = encodeURIComponent("name") + "=" + 
    encodeURIComponent("Nicholas"); 

    由于 JavaScript 中读写 cookie 不是非常直观，常常需要写一些函数来简化 cookie 的功能。基本的
cookie 操作有三种：读取、写入和删除。它们在 CookieUtil 对象中如下表示。
    var CookieUtil = { 
    get: function (name){ 
    var cookieName = encodeURIComponent(name) + "=", 
    cookieStart = document.cookie.indexOf(cookieName), 
    cookieValue = null; 
    if (cookieStart > -1){ 
    var cookieEnd = document.cookie.indexOf(";", cookieStart); 
    if (cookieEnd == -1){ 
    cookieEnd = document.cookie.length; 
    } 
    cookieValue = decodeURIComponent(document.cookie.substring(cookieStart 
    + cookieName.length, cookieEnd)); 
    } 
    return cookieValue; 
    }, 
    set: function (name, value, expires, path, domain, secure) { 
    var cookieText = encodeURIComponent(name) + "=" + 
    encodeURIComponent(value); 
    if (expires instanceof Date) { 
    cookieText += "; expires=" + expires.toGMTString(); 
    } 
    if (path) { 
    cookieText += "; path=" + path; 
    } 
    if (domain) { 
    cookieText += "; domain=" + domain; 
    } 
    if (secure) { 
    cookieText += "; secure"; 
    } 
    document.cookie = cookieText; 
    }, 
    unset: function (name, path, domain, secure){ 
    this.set(name, "", new Date(0), path, domain, secure); 
    } 
    }; 
    CookieUtil.get()方法根据 cookie 的名字获取相应的值。它会在 document.cookie 字符串中查
    找 cookie 名加上等于号的位置。如果找到了，那么使用 indexOf()查找该位置之后的第一个分号（表
    示了该 cookie 的结束位置）。如果没有找到分号，则表示该 cookie 是字符串中的最后一个，则余下的字
    符串都是 cookie 的值。该值使用 decodeURIComponent()进行解码并最后返回。如果没有发现 cookie，
    则返回 null。
    CookieUtil.set()方法在页面上设置一个 cookie，接收如下几个参数：cookie 的名称，cookie 的值，
    可选的用于指定 cookie 何时应被删除的 Date 对象，cookie 的可选的 URL 路径，可选的域，以及可选的
    表示是否要添加 secure 标志的布尔值。参数是按照它们的使用频率排列的，只有头两个是必需的。在
    这个方法中，名称和值都使用encodeURIComponent()进行了URL编码，并检查其他选项。如果expires
    参数是 Date 对象，那么会使用 Date 对象的 toGMTString()方法正确格式化 Date 对象，并添加到
    expires 选项上。方法的其他部分就是构造 cookie 字符串并将其设置到 document.cookie 中。
    没有删除已有 cookie 的直接方法。所以，需要使用相同的路径、域和安全选项再次设置 cookie，并
    将失效时间设置为过去的时间。CookieUtil.unset()方法可以处理这种事情。它接收 4 个参数：要删
    除的 cookie 的名称、可选的路径参数、可选的域参数和可选的安全参数。
    这些参数加上空字符串并设置失效时间为 1970 年 1 月 1 日（初始化为 0ms 的 Date 对象的值），传
    给 CookieUtil.set()。这样就能确保删除 cookie。