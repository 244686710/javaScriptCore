本章内容
 可维护的代码
 保证代码性能
 部署代码

1.1
什么是可维护的代码 
可维护的代码有一些特征。一般来说，如果说代码是可维护的，它需要遵循以下特点。
 可理解性——其他人可以接手代码并理解它的意图和一般途径，而无需原开发人员的完整解释。
 直观性——代码中的东西一看就能明白，不管其操作过程多么复杂。 
 可适应性——代码以一种数据上的变化不要求完全重写的方法撰写。 
 可扩展性——在代码架构上已考虑到在未来允许对核心功能进行扩展。 
 可调试性——当有地方出错时，代码可以给予你足够的信息来尽可能直接地确定问题所在。

1.2 代码约定
    1. 可读性 
     函数和方法——每个函数或方法都应该包含一个注释，描述其目的和用于完成任务所可能使用
    的算法。陈述事先的假设也非常重要，如参数代表什么，函数是否有返回值（因为这不能从函
    数定义中推断出来）。 
     大段代码——用于完成单个任务的多行代码应该在前面放一个描述任务的注释。 
     复杂的算法——如果使用了一种独特的方式解决某个问题，则要在注释中解释你是如何做的。
    这不仅仅可以帮助其他浏览你代码的人，也能在下次你自己查阅代码的时候帮助理解。 
     Hack——因为存在浏览器差异，JavaScript 代码一般会包含一些 hack。不要假设其他人在看代
    码的时候能够理解 hack 所要应付的浏览器问题。如果因为某种浏览器无法使用普通的方法，
    所以你需要用一些不同的方法，那么请将这些信息放在注释中。这样可以减少出现这种情况的
    可能性：有人偶然看到你的 hack，然后“修正”了它，最后重新引入了你本来修正了的错误。 
    缩进和注释可以带来更可读的代码，在未来则更容易维护。

    2. 变量和函数命
     变量名应为名词如 car 或 person。 
     函数名应该以动词开始，如 getName()。返回布尔类型值的函数一般以 is 开头，如
    isEnable()。 
     变量和函数都应使用合乎逻辑的名字，不要担心长度。长度问题可以通过后处理和压缩（本章
    后面会讲到）来缓解。 
    必须避免出现无法表示所包含的数据类型的无用变量名。有了合适的命名，代码阅读起来就像讲述
    故事一样，更容易理解。 

    3. 变量类型透明 
    当定义了一个变量后，它应该被初始化为一个值
    //通过初始化指定变量类型
    var found = false; //布尔型
    var count = -1; //数字
    var name = ""; //字符串
    var person = null; //对象

    //用于指定类型的类型注释
    var found /*:Boolean*/ = false; 
    var count /*:int*/ = 10; 
    var name /*:String*/ = "Nicholas"; 
    var person /*:Object*/ = null; 


1.3 松散耦合 
    1. 解耦 HTML/JavaScript 

    2. 解耦 CSS/JavaScript 

    3. 解耦应用逻辑／事件处理程序 

    以下是要牢记的应用和业务逻辑之间松散耦合的几条原则：
     勿将 event 对象传给其他方法；只传来自 event 对象中所需的数据
     任何可以在应用层面的动作都应该可以在不执行任何事件处理程序的情况下进行
     任何事件处理程序都应该处理事件，然后将处理转交给应用逻辑。

1.4 编程实践
    1. 尊重对象所有权 
         不要为实例或原型添加属性；
         不要为实例或原型添加方法；
         不要重定义已存在的方法。    
    2. 避免全局量 
        //两个全局量——避免！！
        var name = "Nicholas"; 
        function sayName(){ 
        alert(name); 
        } 
        //一个全局量——推荐
        var MyApplication = { 
        name: "Nicholas", 
        sayName: function(){ 
        alert(this.name); 
        } 
        }; 
    3.避免与 null 进行比较 
    如果看到了与 null 比较的代码，尝试使用以下技术替换：
         如果值应为一个引用类型，使用 instanceof 操作符检查其构造函数；
         如果值应为一个基本类型，使用 typeof 检查其类型；
         如果是希望对象包含某个特定的方法名，则使用 typeof 操作符确保指定名字的方法存在于对
        象上。
        代码中的 null 比较越少，就越容易确定代码的目的，并消除不必要的错误。 

    4. 使用常量 
    关键在于将数据和使用它的逻辑进行分离。要注意的值的类型如下所示。
         重复值——任何在多处用到的值都应抽取为一个常量。这就限制了当一个值变了而另一个没变
        的时候会造成的错误。这也包含了 CSS 类名。
         用户界面字符串 —— 任何用于显示给用户的字符串，都应被抽取出来以方便国际化。
         URLs ——在 Web 应用中，资源位置很容易变更，所以推荐用一个公共地方存放所有的 URL。
         任意可能会更改的值 —— 每当你在用到字面量值的时候，你都要问一下自己这个值在未来是不
        是会变化。如果答案是“是”，那么这个值就应该被提取出来作为一个常量。
        对于企业级的 JavaScript 开发而言，使用常量是非常重要的技巧，因为它能让代码更容易维护，并
        且在数据更改的同时保护代码。 




2. 性能

    2.1 注意作用域
        1.避免全局查找
            function updateUI(){ // 不推荐
                var imgs = document.getElementsByTagName("img"); 
                for (var i=0, len=imgs.length; i < len; i++){ 
                    imgs[i].title = document.title + " image " + i; 
                } 
                var msg = document.getElementById("msg"); 
                msg.innerHTML = "Update complete."; 
            } 

            function updateUI(){ //推荐
            var doc = document; 
            var imgs = doc.getElementsByTagName("img"); 
            for (var i=0, len=imgs.length; i < len; i++){ 
            imgs[i].title = doc.title + " image " + i; 
            } 
            var msg = doc.getElementById("msg"); 
            msg.innerHTML = "Update complete."; 
            } 

        2. 避免 with 语句 


    2.2 选择正确方法
        1. 避免不必要的属性查找 
        使用变量和数组要比访问对象上的属性更有效率
        2. 优化循环 
            (1) 减值迭代——大多数循环使用一个从 0 开始、增加到某个特定值的迭代器。在很多情况下，从
            最大值开始，在循环中不断减值的迭代器更加高效。 
            (2) 简化终止条件——由于每次循环过程都会计算终止条件，所以必须保证它尽可能快。也就是说
            避免属性查找或其他 O(n)的操作。 
            (3) 简化循环体——循环体是执行最多的，所以要确保其被最大限度地优化。确保没有某些可以被
            很容易移出循环的密集计算。 
            (4) 使用后测试循环——最常用 for 循环和 while 循环都是前测试循环。而如 do-while 这种后测
            试循环，可以避免最初终止条件的计算，因此运行更快。

        3. 展开循环 
        4. 避免双重解释 
        5. 性能的其他注意事项 
             原生方法较快——只要有可能，使用原生方法而不是自己用 JavaScript 重写一个。原生方法是用
            诸如 C/C++之类的编译型语言写出来的，所以要比 JavaScript 的快很多很多。JavaScript 中最容
            易被忘记的就是可以在 Math 对象中找到的复杂的数学运算；这些方法要比任何用 JavaScript 写
            的同样方法如正弦、余弦快的多。 
             Switch 语句较快 —— 如果有一系列复杂的 if-else 语句，可以转换成单个 switch 语句则可
            以得到更快的代码。还可以通过将 case 语句按照最可能的到最不可能的顺序进行组织，来进一
            步优化 switch 语句。 
             位运算符较快 —— 当进行数学运算的时候，位运算操作要比任何布尔运算或者算数运算快。选
            择性地用位运算替换算数运算可以极大提升复杂计算的性能。诸如取模，逻辑与和逻辑或都可
            以考虑用位运算来替换。 

    2.3 最小化语句数
        1. 多个变量声明 
            //4 个语句——很浪费 
            var count = 5; 
            var color = "blue"; 
            var values = [1,2,3]; 
            var now = new Date(); 

            //一个语句 
            var count = 5, 
                color = "blue", 
                values = [1,2,3], 
                now = new Date(); 

        2. 插入迭代器
            当使用迭代值（也就是在不同的位置进行增加或减少的值）的时候，尽可能合并语句。请看以
            代码：
            var name = values[i]; 
            i++; 
            前面这 2 句语句各只有一个目的：第一个从 values 数组中获取值，然后存储在 name 中；第二个
            给变量 i 增加 1。这两句可以通过迭代值插入第一个语句组合成一个语句，如下所示： 
            var name = values[i++]; 

        3. 使用数组和对象字面量 

    2.4 优化DOM 交互
        1.最小化现场更新
        2.使用innerHTML
        3.使用时间代理
        4.注意HTMLCollection

3 部署代码
    1.构建过程
     知识产权问题 —— 如果把带有完整注释的代码放到线上，那别人就更容易知道你的意图，对它
    再利用，并且可能找到安全漏洞。 
     文件大小 —— 书写代码要保证容易阅读，才能更好地维护，但是这对于性能是不利的。浏览
    并不能从额外的空白字符或者是冗长的函数名和变量名中获得什么好处。 
     代码组织 —— 组织代码要考虑到可维护性并不一定是传送给浏览器的最好方式。 