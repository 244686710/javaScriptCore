1 属性类型：
    1.1数据类型
        数据属性：Configurable, Enumerable, Writable, Value
         [[Configurable]] ：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特
        性，或者能否把属性修改为访问器属性。像前面例子中那样直接在对象上定义的属性，它们的
        这个特性默认值为 true 。
         [[Enumerable]] ：表示能否通过 for-in 循环返回属性。像前面例子中那样直接在对象上定
        义的属性，它们的这个特性默认值为 true 。
         [[Writable]] ：表示能否修改属性的值。像前面例子中那样直接在对象上定义的属性，它们的
        这个特性默认值为 true 。
         [[Value]] ：包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值的时候，
        把新值保存在这个位置。

        修改属性默认特性：
            Object.defineProperty()
            eq: var person = {};
                Object.defineProperty(person, "name", {
                    writable: false,
                    value: "Nicholas"
                });
                alert(person.name); //"Nicholas"
                person.name = "Greg";
                alert(person.name); //"Nicholas"
            定义多个属性：Object.defineProperties()
    1.2 访问器属性
        访问器属性不包含数据值；它们包含一对儿 getter 和 setter 函数（不过，这两个函数都不是必需的）。
        在读取访问器属性时，会调用 getter 函数，这个函数负责返回有效的值；在写入访问器属性时，会调用
        setter 函数并传入新值，这个函数负责决定如何处理数据。访问器属性有如下 4 个特性。
         [[Configurable]] ：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特
        性，或者能否把属性修改为数据属性。对于直接在对象上定义的属性，这个特性的默认值为
        true 。
         [[Enumerable]] ：表示能否通过 for-in 循环返回属性。对于直接在对象上定义的属性，这
        个特性的默认值为 true 。
         [[Get]] ：在读取属性时调用的函数。默认值为 undefined 。
         [[Set]] ：在写入属性时调用的函数。默认值为 undefined 。
        访问器属性不能直接定义，必须使用 Object.defineProperty() 来定义


    1.3 读取属性的特性：
        Object.getOwnPropertyDescriptor()

2 创建对象
    2.1 工厂模式
        function createPerson(name, age, job){
            var o = new Object();
            o.name = name;
            o.age = age;
            o.job = job;
            o.sayName = function(){
                alert(this.name);
            };
            return o;
        }
        var person1 = createPerson("Nicholas", 29, "Software Engineer");
        var person2 = createPerson("Greg", 27, "Doctor");

    2.2 构造函数模式 (构造函数推荐函数首字母大写)
        function Person(name, age, job){
            this.name = name;
            this.age = age;
            this.job = job;
            this.sayName = function() {
                console.log(this.name)
            }
        }

        var person1 = new Person('Yyd', 26, 'Software Engineer')

    2.3 原型模式
        每一份函数都有prototype（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途
        是包含可以由特定类型的所有实例共享的属性和方法
        function Person(){
        }
        Person.prototype.name = "Nicholas";
        Person.prototype.age = 29;
        Person.prototype.job = "Software Engineer";
        Person.prototype.sayName = function(){
        alert(this.name);
        };
        var person1 = new Person();
        person1.sayName(); //"Nicholas"
        var person2 = new Person(); 

        判断对象与对象的_proto_ 关系 ：isPrototypeof();
        Object.getPrototypeOf():
        Object.getPrototypeOf()可以方便地取得一个对象的原型，而这在利用原型实现继承（本章稍后会讨论）的情况下是非常重要的
        hasOwnProperty() 方法可以检测一个属性是存在于实例中，还是存在于原型中
        Object.keys():取得对象上所有可枚举的实例属性

    2.4 组合使用构造函数模式和原型模式  
        构造函数与原型混成的模式，是目前在 ECMAScript中使用最广泛、认同度最高的一种创建自
        定义类型的方法。可以说，这是用来定义引用类型的一种默认模式  
        function Person(name, age, job){
            this.name = name;
            this.age = age;
            this.job = job;
            this.friends = ["Shelby", "Court"];
        }
        Person.prototype = {
            constructor : Person,
            sayName : function(){
                alert(this.name);
            }
        }
        var person1 = new Person("Nicholas", 29, "Software Engineer");
        var person2 = new Person("Greg", 27, "Doctor");
        person1.friends.push("Van");
        alert(person1.friends); //"Shelby,Count,Van"
        alert(person2.friends); //"Shelby,Count"
        alert(person1.friends === person2.friends); //false
        alert(person1.sayName === person2.sayName); //true

    2.5 动态原型模式

3 继承  由原型链来实现继承

    3.1 原型链
        确认原型和实例的关系
            instanceof 
            Object.prototype.isPrototypeOf()